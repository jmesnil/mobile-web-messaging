== Messaging Concepts

What does messaging? how does it compare to request/reply protocols such as HTTP?

=== The Advantages of Messaging

TODO

=== Messaging Models

Messaging protocols provides differents *models* (or domains) of interaction between participants.
The models define which can receive a message sent to a given destination.


==== Destination

The destination is the core concept of messaging. It is the main entity clients interact with.
Depending on the messaging models, the destination can be a queue or a topic (or something else if the protocol allows to defined specific models).

A messaging client can have two different roles. If is is _sending_ a message to a destion, it is a *producer*.
If it is receiving messages from the destination, it is a *consumer*.
Producers and consumers are not aware of each other and don't need to be connected at the same time to exchange messages.
In most messaging protocols, it's not even possible for the producer to know which consumer received its messsage, and conversely, 
a consumer does not know which producer sent its message.
They only need to agree on the destinations they use and the message they will respectively send and receive.

==== Publish/Subscribe

For each message sent to the destination, every client interested by the destination will receive it: _One to Many_.

===== Topics

When the model is publish/subscribe, the destination is called a *topic*.

===== Topics Hierarchy

Topic often allows to build a *hierarchy* of topics.

A consumer can subscribe to any node in the topic hierarchy and decide if it is also interested by the descendants of the node

==== Point-to-Point

For each message sent to the destination, only one consumer will receive it: _One to One_.

===== Queues

When the model is point-to-point, the destination is called a *queue*.

==== Message

A Message is the information that is sent by a producer to the destination and received by a consumer from the destination.
It is the only shared piece of data between the producer and the consumer.

A message is composed of three different parts:

* destination
* headers
* payload

==== Destination

A message defines which destination is helding it.
It is set when the destination takes it from the producer.
This allows a consumer to receive messages from multiple destinations and know for each message the destination is coming from.

==== Headers

Protoco headers
User headers

==== Payload

Opaque content

=== Messages Vs. Notifications

TODO

=== Messaging Vs. Request/Reply

TODO